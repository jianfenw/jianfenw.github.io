<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://jianfenw.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://jianfenw.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-07-31T16:57:31+00:00</updated><id>https://jianfenw.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Understanding Linux Kernel Memory Statistics</title><link href="https://jianfenw.github.io/blog/2024/meminfo/" rel="alternate" type="text/html" title="Understanding Linux Kernel Memory Statistics"/><published>2024-01-15T00:00:01+00:00</published><updated>2024-01-15T00:00:01+00:00</updated><id>https://jianfenw.github.io/blog/2024/meminfo</id><content type="html" xml:base="https://jianfenw.github.io/blog/2024/meminfo/"><![CDATA[]]></content><author><name></name></author><category term="mm"/><summary type="html"><![CDATA[What is Meminfo? How to get Meminfo for a dead Linux system?]]></summary></entry><entry><title type="html">Get physical pages via alloc_pages</title><link href="https://jianfenw.github.io/blog/2023/alloc-pages/" rel="alternate" type="text/html" title="Get physical pages via alloc_pages"/><published>2023-09-21T01:12:00+00:00</published><updated>2023-09-21T01:12:00+00:00</updated><id>https://jianfenw.github.io/blog/2023/alloc-pages</id><content type="html" xml:base="https://jianfenw.github.io/blog/2023/alloc-pages/"><![CDATA[<p>This theme implements a built-in Jekyll feature, the use of Rouge, for syntax highlighting. It supports more than 100 languages. This example is in C++. All you have to do is wrap your code in a liquid tag:</p> <p>{% highlight c++ linenos %} <br/> code code code <br/> {% endhighlight %}</p> <p>The keyword <code class="language-plaintext highlighter-rouge">linenos</code> triggers display of line numbers. Produces something like this:</p> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="mm"/><summary type="html"><![CDATA[Understand how Linux kernel allocates, compacts, and reclaims memory pages.]]></summary></entry></feed>